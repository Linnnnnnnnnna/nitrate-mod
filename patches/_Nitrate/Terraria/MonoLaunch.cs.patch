--- src/tModLoader/Terraria/MonoLaunch.cs
+++ src/Nitrate/Terraria/MonoLaunch.cs
@@ -1,4 +_,3 @@
-#if !WINDOWS
 using System;
 using System.Collections.Generic;
 using System.IO;
@@ -7,7 +_,6 @@
 using System.Runtime.InteropServices;
 using System.Runtime.Loader;
 using System.Threading;
-using Terraria;
 using Terraria.ModLoader;
 using Terraria.ModLoader.Core;
 using Terraria.ModLoader.Engine;
@@ -28,23 +_,8 @@
 
 		Thread.CurrentThread.Name = "Entry Thread";
 
-#if NETCORE
 		NativeLibraries.SetNativeLibraryPath(NativesDir);
 		AssemblyLoadContext.Default.ResolvingUnmanagedDll += ResolveNativeLibrary;
-#else
-		AppDomain.CurrentDomain.AssemblyResolve += delegate (object sender, ResolveEventArgs sargs) {
-			string resourceName = new AssemblyName(sargs.Name).Name + ".dll";
-			string text = Array.Find(typeof(Program).Assembly.GetManifestResourceNames(), (string element) => element.EndsWith(resourceName));
-			if (text == null)
-				return null;
-
-			using (Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(text)) {
-				byte[] array = new byte[stream.Length];
-				stream.Read(array, 0, array.Length);
-				return Assembly.Load(array);
-			}
-		};
-#endif
 
 		Environment.SetEnvironmentVariable("FNA_WORKAROUND_WINDOW_RESIZABLE", "1");
 
@@ -79,7 +_,6 @@
 		Program.LaunchGame(args, monoArgs: true);
 	}
 
-#if NETCORE
 	public static readonly string NativesDir = Path.Combine(Environment.CurrentDirectory, "Libraries", "Native", NativePlatformDir);
 
 	private static string NativePlatformDir =>
@@ -113,7 +_,4 @@
 			return assemblies[name] = handle;
 		}
 	}
-#endif
 }
-
-#endif
